diff --git a/src/log-utils.cc b/src/log-utils.cc
index 9120c55..a76dd07 100644
--- a/src/log-utils.cc
+++ b/src/log-utils.cc
@@ -186,7 +186,12 @@ void Log::MessageBuilder::AppendDetailed(String* str, bool show_impl_info) {
   }
   for (int i = 0; i < len; i++) {
     uc32 c = str->Get(i);
-    if (ebcdic2ascii(c) > 0xff) {
+#ifdef V8_OS_ZOS
+    bool CharGreaterThanFF = ebcdic2ascii(c) > 0xff;
+#else
+    bool CharGreaterThanFF = false;
+#endif
+    if (CharGreaterThanFF) {
       Append("\\u%04x", c);
     } else if (ebcdic2ascii(c) < 32 || ebcdic2ascii(c) > 126) {
       Append("\\x%02x", c);
diff --git a/src/objects.h b/src/objects.h
index e92cd88..1c8e400 100644
--- a/src/objects.h
+++ b/src/objects.h
@@ -9385,7 +9385,11 @@ class String: public Name {
   // first non-ascii character, rather than directly to the non-ascii character.
   // If the return value is >= the passed length, the entire string was ASCII.
   static inline int NonAsciiStart(const char* chars, int length) {
+#ifdef V8_OS_ZOS
     const char* start = (const char *)ebcdic2ascii(*chars);
+#else
+    const char* start = chars;
+#endif
     const char* limit = chars + length;
 #ifdef V8_HOST_CAN_READ_UNALIGNED
     DCHECK(unibrow::Utf8::kMaxOneByteChar == 0x7F);
diff --git a/src/runtime.cc b/src/runtime.cc
index edf9dae..e5af78b 100644
--- a/src/runtime.cc
+++ b/src/runtime.cc
@@ -6489,7 +6489,7 @@ static bool CheckFastEBCDICConvert(char * dst,
       DCHECK('j' <= src[i] && src[i] <= 'r');
       DCHECK('s' <= src[i] && src[i] <= 'z');
     }
-    DCHECK(dst[i] == src[i] ^ 0x40);
+    DCHECK(dst[i] == (src[i] ^ 0x40));
   }
   return (expected_changed == changed);
 }
@@ -6519,9 +6519,9 @@ static bool FastEBCDICConvert(char * dst,
 
   while (src < limit) {
     char c = *src;
-    if (lo_1 < c && c < hi_1 ||
-        lo_2 < c && c < hi_2 ||
-        lo_3 < c && c < hi_3) {
+    if (((lo_1 < c) && (c < hi_1)) ||
+        ((lo_2 < c) && (c < hi_2)) ||
+        ((lo_3 < c) && (c < hi_3))) {
       c ^= 0x40 ;  // Convert the zone nibble.
       changed = true;
     }
diff --git a/src/utils.h b/src/utils.h
index cb4b94a..863e67c 100644
--- a/src/utils.h
+++ b/src/utils.h
@@ -196,9 +196,10 @@ inline const uint8_t& ebcdic2ascii(const char letter) {
   };
   return e2a[letter];
 #else
-  return letter;
+  const uint8_t* letter_to_return = reinterpret_cast<const uint8_t*>(&letter);
+  return *letter_to_return;
 #endif
-};
+}
 
 // ----------------------------------------------------------------------------
 // BitField is a help template for encoding and decode bitfield with
